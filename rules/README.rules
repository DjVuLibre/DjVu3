This are files that define general rules used in various makes.
To include them, use
	%%%include <FILENAME>
where the greater than and less than signs are literal.

The following rules are defined:
	commands:	This includes MACRO's for most of the common shell
			commands.  This allows you to use things like:
				$(TRUE)
			for
				@%true%@
			The advantage of a macro is the user can override
			the value on the command line.

	depend:		This defines a generic 'make depend' rule.  This
			requires %%%include <commands>

	versions:	This is needed to define the version of dynamic
			libraries to be built.

ABOUT VERSIONS:

Here is the version number strategy we have been using since day 1 on the
DjVu3 tree.  Each version is numbered with a 4 digit number like 3.0.X.Y.
The .Y value is optional for the first build...

	3.0 	--> Major version number of the library.
	   .X   --> Current source snap shot of the the tree.  This snap shot is taken from
	            the trunk, and does not use revision tags.
	     .Y --> Build number

NOTE:  All versions of build revisions should use the same source.

So something like:
	cvs update -r SDK_3_0beta_12_1 src
	cvs diff -r SDK_3_0beta_12_2 src > patch

should result in a patch file that includes absolutely NO *.cpp, *.c, or *.h files,
with the possible exception of comment lines.

If there is even a single line of code changed between the version, then somebody 
make a mistake.

However, what may change is:
	Makefile*
	config/*
	rules/*
	text/* 
	html/*
	man/*
as well as any scripts.  The only reason we allow comment changes is because
those may effect the files in the documentation directories, which are allowed
to change.

If source code should not be included in a build, then it must be put on an
independent branch, and merged in the trunk only when the author of the code
is willing to have it included.

When doing an official build of a new version do the following steps:
	1. Checkout all the newest source on the main trunk of the DjVu3
	   tree.
	2. Update the versions file.
	3. Commit the versions file.
	4. Build the release.
	5. Sanity test the release.
	6. If it passes sanity tests, then tag the release in cvs.  The de-facto
	   standard is:
		SDK_3_0beta_X_Y
	   for beta, and
		SDK_3_0_X_Y
	   for final.

	   If you are only building a subset, such as bitonal tools, you can
	   tag that respectively:
		BITONAL_3_0beta_X_Y

	7. Post your release to the djvu-depot for testing.


		Bill


