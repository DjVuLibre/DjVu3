%%%include <commands>

SHELL=/bin/sh
prefix=@%prefix%@
bindir=@%PROJECT_PREFIX%@/bin
SRCDIR=@%srcdir%@
TOPSRCDIR=@%TOPSRCDIR%@
TOPBUILDDIR=@%TOPBUILDDIR%@
VPATH=@%srcdir%@
CXX=@%CXX%@
OPT=@%OPT%@
WARN=@%WARN%@
DEFS=@%DEFS%@
INCS=-I$(SRCDIR) -I$(SRCDIR)/..
CXXFLAGS=@%CXXFLAGS%@ @%CXXOPT%@ $(DEFS) $(OPT) $(WARN) $(INCS) -DUNIX
LDFLAGS=
DOCXX=@%docxx%@
LIBS=@%LIBS%@
MAKESTLIB=@%make_stlib%@
MAKESHLIB=@%make_shlib%@
RANLIB=@%ranlib%@

# Defs

LIB= ../libdjvu++.a
TARG= TestString TestException TestArray TestList TestMap\
      TestBitmap TestSmartPointer TestJB2 TestThreads


# Make all

all: $(TARG)
	echo Done.

# Generic rules

clean:
	-$(RM) 2>>/dev/null -rf $(TARG) *.o *.out ii_files *.rpo ; true

distclean:
	-$(RM) 2>>/dev/null -rf $(TARG) *.o *.out ii_files *.rpo Makefile ; true


%%%include <depend>

PHONY: clean distclean

# Handle cpp files as C++
.SUFFIXES: .cpp
.cpp.o:
	$(CXX) $(CXXFLAGS) -c $(SRCDIR)/$*.cpp

.cpp: $(LIB)
	$(CXX) $(CXXFLAGS) $(LDFLAGS) -c $(SRCDIR)/$*.cpp
	if [ -n "$(RPO)" ] ; then $(RPO) $*.o $(LIB) ; fi
	$(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $*.o $(LIB) $(LIBS)
	@if test -f $(SRCDIR)/$@.exp ; then\
	   if $@ > $@.out 2>&1  &&  cmp -s $@.out $(SRCDIR)/$@.exp  ;\
	     then echo -- $@ passed ;\
	     else echo -- $@ begin ; cat $@.out ; echo -- $@ end ;\
           fi ;\
	   else echo -- $@ compiled ;\
	 fi

TestThreads: $(LIB)
	$(CXX) $(CXXFLAGS) $(LDFLAGS) -c $(SRCDIR)/TestThreads.cpp
	if [ -n "$(RPO)" ] ; then $(RPO) TestThreads.o $(LIB) ; fi
	$(CXX) $(CXXFLAGS) $(LDFLAGS) -o TestThreads TestThreads.o $(LIB) $(LIBS)
	@if test -f $(SRCDIR)/$@.exp ; then\
	   if $@ 2>&1 | sort > $@.out 2>&1  &&  cmp -s $@.out $(SRCDIR)/$@.exp  ;\
	     then echo -- $@ passed ;\
	     else echo -- $@ begin ; cat $@.out ; echo -- $@ end ;\
           fi ;\
	   else echo -- $@ compiled ;\
	 fi

%%%include "Makefile.depend"

